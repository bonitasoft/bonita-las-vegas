{
  "designerVersion" : "1.7.29",
  "id" : "customAssignAndExecuteWithContractButton",
  "name" : "AssignAndExecuteWithContractButton",
  "lastUpdate" : 1539262540222,
  "template" : "<div class=\"text-{{ properties.alignment }}\">\n    <button\n        ng-class=\"'btn btn-' + properties.buttonStyle\"\n        ng-click=\"ctrl.action()\"\n        type=\"button\"\n        ng-disabled=\"properties.disabled || ctrl.busy\" ng-bind-html=\"properties.label | uiTranslate\"></button>\n</div>\n",
  "icon" : "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 20'><g><path fill='#CBD5E1' d='M47,15.2c0,0.7-1.7,1.8-1.7,1.8S4.8,17,3.7,17c-1.6,0-3.6-1.9-3.6-1.9s0.7,4.8,4,5c2.4,0.1,42.4,0,42.4,0 s3.5-0.2,3.5-3.6c0-1.3,0.1-11.5,0.1-12.4c-0.1-2-4-4-4-4L47,1.8C47,1.8,47,14.5,47,15.2z'/><path fill='#fff' d='M3.9,1h40.3C45.7,1,47,2.2,47,3.6v10.8c0,1.4-1.3,2.6-2.9,2.6H3.9C2.3,17,1,15.8,1,14.4V3.6 C1,2.2,2.3,1,3.9,1z M3,0C1.3,0,0,1.3,0,3v12c0,1.7,1.3,3,3,3h42c1.7,0,3-1.3,3-3V3c0-1.7-1.3-3-3-3H3z'/></g></svg>",
  "controller" : "function PbButtonCtrl($scope, $http, $location, $log, $window) {\n\n   'use strict';\n\n  var vm = this;\n\n  this.action = function action() {\n    var id;\n    if ($scope.properties.action === 'Submit task') {\n      id = getUrlParam('id');\n      if (id) {\n        vm.busy = true;\n        var req = {\n          method: 'PUT',\n          url: '../API/bpm/userTask/' + getUrlParam('id'),\n          data: {'assigned_id': $scope.properties.assignedId}//,\n          //params:  getUserParam()\n        };\n    \n       $http(req)\n          .success(function(data, status) {\n              var req = {\n                  method: 'POST',\n                  url: '../API/bpm/userTask/' + getUrlParam('id') + '/execution',\n                  data: $scope.properties.contract//,\n                  //params:  getUserParam()\n                };\n                $http(req)\n                    .success(function(data,status) {\n                        notifyParentFrame({ message: 'success', status: status, dataFromSuccess: data });\n                    })\n                    .error(function(data, status) {\n                        $scope.properties.dataFromError = data;\n                        notifyParentFrame({ message: 'error', status: status, dataFromError: data  });\n                     })\n          })\n          .error(function(data, status) {\n            $scope.properties.dataFromError = data;\n            notifyParentFrame({ message: 'error', status: status, dataFromError: data  });\n          })\n          .finally(function() {\n            vm.busy = false;\n          });\n      } else {\n        $log.log('Impossible to retrieve the task id value from the URL');\n      }\n    }\n  };\n\n  function notifyParentFrame(additionalProperties) {\n    if ($window.parent !== $window.self) {\n      var dataToSend = angular.extend({}, $scope.properties, additionalProperties);\n      $window.parent.postMessage(JSON.stringify(dataToSend), '*');\n    }\n  }\n\n  function getUserParam() {\n    var userId = getUrlParam('user');\n    if (userId) {\n      return { 'user': userId };\n    }\n    return {};\n  }\n\n  /**\n   * Extract the param value from a URL query\n   * e.g. if param = \"id\", it extracts the id value in the following cases:\n   *  1. http://localhost/bonita/portal/resource/process/ProcName/1.0/content/?id=8880000\n   *  2. http://localhost/bonita/portal/resource/process/ProcName/1.0/content/?param=value&id=8880000&locale=en\n   *  3. http://localhost/bonita/portal/resource/process/ProcName/1.0/content/?param=value&id=8880000&locale=en#hash=value\n   * @returns {id}\n   */\n  function getUrlParam(param) {\n    var paramValue = $location.absUrl().match('[//?&]' + param + '=([^&#]*)($|[&#])');\n    if (paramValue) {\n      return paramValue[1];\n    }\n    return '';\n  }\n}",
  "description" : "Trigger for an action in a page or form",
  "custom" : true,
  "order" : 12,
  "properties" : [ {
    "label" : "Disabled",
    "name" : "disabled",
    "type" : "boolean",
    "defaultValue" : false,
    "bond" : "expression"
  }, {
    "label" : "Label",
    "name" : "label",
    "type" : "text",
    "defaultValue" : "Submit",
    "bond" : "interpolation"
  }, {
    "label" : "Alignment",
    "name" : "alignment",
    "type" : "choice",
    "defaultValue" : "left",
    "choiceValues" : [ "left", "center", "right" ],
    "bond" : "constant"
  }, {
    "label" : "Style",
    "name" : "buttonStyle",
    "type" : "choice",
    "defaultValue" : "default",
    "choiceValues" : [ "default", "primary", "success", "info", "warning", "danger", "link" ],
    "bond" : "constant"
  }, {
    "label" : "Action",
    "name" : "action",
    "type" : "choice",
    "defaultValue" : "Submit task",
    "choiceValues" : [ {
      "value" : "Submit task",
      "label" : "Submit task",
      "group" : "Bonita BPM"
    }, {
      "value" : "Start process",
      "label" : "Start process",
      "group" : "Bonita BPM"
    }, {
      "value" : "POST",
      "label" : "POST",
      "group" : "HTTP request"
    }, {
      "value" : "PUT",
      "label" : "PUT",
      "group" : "HTTP request"
    }, {
      "value" : "GET",
      "label" : "GET",
      "group" : "HTTP request"
    }, {
      "value" : "DELETE",
      "label" : "DELETE",
      "group" : "HTTP request"
    }, {
      "value" : "Add to collection",
      "label" : "Add to collection",
      "group" : "Collection"
    }, {
      "value" : "Remove from collection",
      "label" : "Remove from collection",
      "group" : "Collection"
    } ],
    "bond" : "constant"
  }, {
    "label" : "URL to call",
    "name" : "url",
    "caption" : "Send data to this URL when the button is clicked",
    "help" : "URL used to perform the HTTP request when this button is clicked.",
    "showFor" : "['POST', 'PUT', 'GET', 'DELETE'].indexOf(properties.action.value) > -1",
    "type" : "text",
    "bond" : "interpolation"
  }, {
    "label" : "Contract sent on click",
    "name" : "contract",
    "help" : "",
    "showFor" : "properties.action.value === 'POST' || properties.action.value === 'PUT' || properties.action.value === 'Submit task' || properties.action.value ===  'Start process'",
    "type" : "text",
    "bond" : "expression"
  }, {
    "label" : "Failed response value",
    "name" : "dataFromError",
    "help" : "Holds the response when the request has failed",
    "type" : "text",
    "bond" : "variable"
  }, {
    "label" : "Assigned id",
    "name" : "assignedId",
    "type" : "integer",
    "bond" : "expression"
  } ],
  "assets" : [ ],
  "requiredModules" : [ ],
  "type" : "widget",
  "hasHelp" : true
}